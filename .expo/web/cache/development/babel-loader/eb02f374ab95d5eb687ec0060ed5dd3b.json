{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/tanjiro255/Desktop/React/manager/src/components/EmployeeList.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport ListView from \"react-native-web/dist/exports/ListView\";\nimport { connect } from 'react-redux';\nimport { employeeFetch } from \"../actions\";\nimport ListItem from \"./ListItem\";\n\nvar EmployeeList = function (_React$Component) {\n  _inherits(EmployeeList, _React$Component);\n\n  var _super = _createSuper(EmployeeList);\n\n  function EmployeeList() {\n    var _this;\n\n    _classCallCheck(this, EmployeeList);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.createDataSource = function (_ref) {\n      var employees = _ref.employees;\n      var ds = new ListView.DataSource({\n        rowHasChanged: function rowHasChanged(r1, r2) {\n          return r1 !== r2;\n        }\n      });\n      _this.dataSource = ds.cloneWithRows(employees);\n    };\n\n    _this.renderRow = function (employee) {\n      return React.createElement(ListItem, {\n        employee: employee,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 12\n        }\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(EmployeeList, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.props.employeeFetch();\n      this.createDataSource(this.props);\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      this.createDataSource(nextProps);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(ListView, {\n        enableEmptySections: true,\n        dataSource: this.dataSource,\n        renderRow: this.renderRow,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 7\n        }\n      }, React.createElement(ListItem, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return EmployeeList;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  var employees = _.map(state.employees, function (val, uid) {\n    return _objectSpread(_objectSpread({}, val), {}, {\n      uid: uid\n    });\n  });\n\n  return {\n    employees: employees\n  };\n};\n\nexport default connect(mapStateToProps, {\n  employeeFetch: employeeFetch\n})(EmployeeList);","map":{"version":3,"sources":["/home/tanjiro255/Desktop/React/manager/src/components/EmployeeList.js"],"names":["React","connect","employeeFetch","ListItem","EmployeeList","createDataSource","employees","ds","ListView","DataSource","rowHasChanged","r1","r2","dataSource","cloneWithRows","renderRow","employee","props","nextProps","Component","mapStateToProps","state","_","map","val","uid"],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SAASC,aAAT;AACA,OAAOC,QAAP;;IAEMC,Y;;;;;;;;;;;;;;;;UAUJC,gB,GAAmB,gBAAmB;AAAA,UAAhBC,SAAgB,QAAhBA,SAAgB;AACpC,UAAMC,EAAE,GAAG,IAAIC,QAAQ,CAACC,UAAb,CAAwB;AACjCC,QAAAA,aAAa,EAAE,uBAACC,EAAD,EAAKC,EAAL;AAAA,iBAAYD,EAAE,KAAKC,EAAnB;AAAA;AADkB,OAAxB,CAAX;AAIA,YAAKC,UAAL,GAAkBN,EAAE,CAACO,aAAH,CAAiBR,SAAjB,CAAlB;AACD,K;;UAEDS,S,GAAY,UAAAC,QAAQ,EAAI;AACtB,aAAO,oBAAC,QAAD;AAAU,QAAA,QAAQ,EAAEA,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD,K;;;;;;;yCAnBoB;AACnB,WAAKC,KAAL,CAAWf,aAAX;AACA,WAAKG,gBAAL,CAAsB,KAAKY,KAA3B;AACD;;;8CAEyBC,S,EAAW;AACnC,WAAKb,gBAAL,CAAsBa,SAAtB;AACD;;;6BAcQ;AAEP,aACE,oBAAC,QAAD;AACE,QAAA,mBAAmB,MADrB;AAEE,QAAA,UAAU,EAAE,KAAKL,UAFnB;AAGE,QAAA,SAAS,EAAE,KAAKE,SAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALF,CADF;AASD;;;;EAjCwBf,KAAK,CAACmB,S;;AAoCjC,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAW;AAClC,MAAMf,SAAS,GAAGgB,CAAC,CAACC,GAAF,CAAMF,KAAK,CAACf,SAAZ,EAAwB,UAACkB,GAAD,EAAOC,GAAP,EAAe;AACxD,2CAAYD,GAAZ;AAAkBC,MAAAA,GAAG,EAAHA;AAAlB;AACA,GAFiB,CAAlB;;AAGA,SAAO;AAAEnB,IAAAA,SAAS,EAATA;AAAF,GAAP;AACA,CALD;;AAOA,eAAeL,OAAO,CAACmB,eAAD,EAAmB;AAAElB,EAAAA,aAAa,EAAbA;AAAF,CAAnB,CAAP,CAA6CE,YAA7C,CAAf","sourcesContent":["import React from 'react';\nimport { ListView } from 'react-native';\nimport { connect } from 'react-redux';\n\nimport { employeeFetch } from '../actions';\nimport ListItem from './ListItem';\n\nclass EmployeeList extends React.Component {\n  componentWillMount() {\n    this.props.employeeFetch();\n    this.createDataSource(this.props);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.createDataSource(nextProps);\n  }\n\n  createDataSource = ({ employees }) => {\n    const ds = new ListView.DataSource({\n      rowHasChanged: (r1, r2) => r1 !== r2\n    });\n\n    this.dataSource = ds.cloneWithRows(employees);\n  };\n\n  renderRow = employee => {\n    return <ListItem employee={employee} />;\n  };\n\n  render() {\n    // console.log(this.props);\n    return (\n      <ListView\n        enableEmptySections\n        dataSource={this.dataSource}\n        renderRow={this.renderRow}\n      >\n        <ListItem />\n      </ListView>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n\tconst employees = _.map(state.employees , (val , uid) => {\n\t\treturn { ...val , uid };\n\t});\n\treturn { employees }; \n}\n\nexport default connect(mapStateToProps , { employeeFetch })(EmployeeList);\n\n/*import React , { Component }from 'react';\nimport { ListView } from 'react-native';\nimport { connect } from 'react-redux';\nimport { employeeFetch } from '../actions';\nimport _ from 'lodash';\nimport ListItem from './ListItem'\n\nclass EmployeeList extends Component{\n\tcomponentWillMount(){\n\t\tthis.props.employeeFetch();\n\n\t\tthis.createDataSource(this.props);\t\t\n\t}\n\n\tcomponentWillReceiveProps(nextProps){\n\t\t//next props are the next set of props this component is gonna be called with and \n\t\t//this.props syilll holds the old props\n\t\tthis.createDataSource(nextProps);\n\t}\n\tcreateDataSource({ employees }){\n\t\tconst ds = new ListView.DataSource({\n\t\t\trowHasChanged: (r1 , r2) => r1 !== r2\n\t\t});\n\t\tthis.dataSource = ds.cloneWithRows(this.props.employees);\n\t}\n\trenderRow(employee){\n\t\treturn <ListItem employee={employee} />; \n\t}\n\n\trender(){\n\t\treturn(\n\t\t\t<ListView \n\t\t\t\tenableEmptySections\n\t\t\t\tdataSource={this.dataSource}\n\t\t\t\trenderRow={this.renderRow}\n\t\t\t/>\n\t\t)\n\t}\n}\n\nconst mapStateToProps = (state) => {\n\tconst employees = _.map(state.employees , (val , uid) => {\n\t\treturn { ...val , uid };\n\t});\n\treturn { employees }; \n}\n\nexport default connect(mapStateToProps , { employeeFetch })(EmployeeList);\n*/"]},"metadata":{},"sourceType":"module"}