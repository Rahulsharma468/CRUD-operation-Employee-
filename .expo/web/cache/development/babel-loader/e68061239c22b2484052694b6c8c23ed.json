{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/tanjiro255/Desktop/React/manager/src/components/EmployeeList.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport ListView from \"react-native-web/dist/exports/ListView\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { connect } from 'react-redux';\nimport { employeeFetch } from \"../actions\";\nimport _ from 'lodash';\n\nvar EmployeeList = function (_Component) {\n  _inherits(EmployeeList, _Component);\n\n  var _super = _createSuper(EmployeeList);\n\n  function EmployeeList() {\n    _classCallCheck(this, EmployeeList);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(EmployeeList, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.props.employeeFetch();\n      this.createDataSource(this.props);\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      this.createDataSource(nextProps);\n    }\n  }, {\n    key: \"createDataSource\",\n    value: function createDataSource(_ref) {\n      var allEmpz = _ref.allEmpz;\n      var ds = new ListView.DataSource({\n        rowHasChanged: function rowHasChanged(r1, r2) {\n          return r1 !== r2;\n        }\n      });\n      this.dataSource = ds.cloneWithRows(this.props.allEmpz);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 4\n        }\n      }, React.createElement(Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 5\n        }\n      }, \"hdksjf\"));\n    }\n  }]);\n\n  return EmployeeList;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  var allEmpz = _.map(state.allEmpz, function (val, uid) {\n    return _objectSpread(_objectSpread({}, val), {}, {\n      uid: uid\n    });\n  });\n\n  return {\n    allEmpz: allEmpz\n  };\n};\n\nexport default connect(mapStateToProps, {\n  employeeFetch: employeeFetch\n})(EmployeeList);","map":{"version":3,"sources":["/home/tanjiro255/Desktop/React/manager/src/components/EmployeeList.js"],"names":["React","Component","connect","employeeFetch","_","EmployeeList","props","createDataSource","nextProps","allEmpz","ds","ListView","DataSource","rowHasChanged","r1","r2","dataSource","cloneWithRows","mapStateToProps","state","map","val","uid"],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAiBC,SAAjB,QAAiC,OAAjC;;;;AAEA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,aAAT;AACA,OAAOC,CAAP,MAAc,QAAd;;IAEMC,Y;;;;;;;;;;;;;yCACe;AACnB,WAAKC,KAAL,CAAWH,aAAX;AAEA,WAAKI,gBAAL,CAAsB,KAAKD,KAA3B;AACA;;;8CAEyBE,S,EAAU;AAGnC,WAAKD,gBAAL,CAAsBC,SAAtB;AACA;;;2CAC4B;AAAA,UAAVC,OAAU,QAAVA,OAAU;AAC5B,UAAMC,EAAE,GAAG,IAAIC,QAAQ,CAACC,UAAb,CAAwB;AAClCC,QAAAA,aAAa,EAAE,uBAACC,EAAD,EAAMC,EAAN;AAAA,iBAAaD,EAAE,KAAKC,EAApB;AAAA;AADmB,OAAxB,CAAX;AAGA,WAAKC,UAAL,GAAkBN,EAAE,CAACO,aAAH,CAAiB,KAAKX,KAAL,CAAWG,OAA5B,CAAlB;AACA;;;6BAEO;AACP,aACC,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADD,CADD;AAKA;;;;EAzByBR,S;;AA4B3B,IAAMiB,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAW;AAClC,MAAMV,OAAO,GAAGL,CAAC,CAACgB,GAAF,CAAMD,KAAK,CAACV,OAAZ,EAAsB,UAACY,GAAD,EAAOC,GAAP,EAAe;AACpD,2CAAYD,GAAZ;AAAkBC,MAAAA,GAAG,EAAHA;AAAlB;AACA,GAFe,CAAhB;;AAGA,SAAO;AAAEb,IAAAA,OAAO,EAAPA;AAAF,GAAP;AACA,CALD;;AAOA,eAAeP,OAAO,CAACgB,eAAD,EAAmB;AAAEf,EAAAA,aAAa,EAAbA;AAAF,CAAnB,CAAP,CAA6CE,YAA7C,CAAf","sourcesContent":["import React , { Component }from 'react';\nimport { ListView , View , Text } from 'react-native';\nimport { connect } from 'react-redux';\nimport { employeeFetch } from '../actions';\nimport _ from 'lodash';\n\nclass EmployeeList extends Component{\n\tcomponentWillMount(){\n\t\tthis.props.employeeFetch();\n\n\t\tthis.createDataSource(this.props);\t\t\n\t}\n\n\tcomponentWillReceiveProps(nextProps){\n\t\t//next props are the next set of props this component is gonna be called with and \n\t\t//this.props syilll holds the old props\n\t\tthis.createDataSource(nextProps);\n\t}\n\tcreateDataSource({ allEmpz }){\n\t\tconst ds = new ListView.DataSource({\n\t\t\trowHasChanged: (r1 , r2) => r1 !== r2\n\t\t});\n\t\tthis.dataSource = ds.cloneWithRows(this.props.allEmpz);\n\t}\n\n\trender(){\n\t\treturn(\n\t\t\t<View>\n\t\t\t\t<Text>hdksjf</Text>\n\t\t\t</View>\n\t\t)\n\t}\n}\n\nconst mapStateToProps = (state) => {\n\tconst allEmpz = _.map(state.allEmpz , (val , uid) => {\n\t\treturn { ...val , uid };\n\t});\n\treturn { allEmpz }; \n}\n\nexport default connect(mapStateToProps , { employeeFetch })(EmployeeList);"]},"metadata":{},"sourceType":"module"}