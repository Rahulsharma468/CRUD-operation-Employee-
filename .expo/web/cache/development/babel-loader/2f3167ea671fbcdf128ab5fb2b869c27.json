{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { EMAIL_CHANGED, PASSWORD_CHANGED, LOGIN_USER_SUCCESS, LOGIN_USER_FAIL, LOGIN_USER } from \"../actions/types\";\nvar INITIAL_STATE = {\n  email: '',\n  password: '',\n  user: null,\n  error: '',\n  loading: false,\n  reduxPage: ''\n};\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INITIAL_STATE;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  console.log('action', action);\n\n  switch (action.type) {\n    case EMAIL_CHANGED:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        email: action.payload\n      });\n\n    case PASSWORD_CHANGED:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        password: action.payload\n      });\n\n    case LOGIN_USER:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: true,\n        error: ''\n      });\n\n    case LOGIN_USER_SUCCESS:\n      return _objectSpread(_objectSpread(_objectSpread({}, state), INITIAL_STATE), {}, {\n        user: action.payload,\n        reduxPage: 'employee list'\n      });\n\n    case LOGIN_USER_FAIL:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: 'Authentication Failed.',\n        password: '',\n        loading: false,\n        reduxPage: ''\n      });\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/home/tanjiro255/Desktop/React/manager/src/reducers/AuthReducer.js"],"names":["EMAIL_CHANGED","PASSWORD_CHANGED","LOGIN_USER_SUCCESS","LOGIN_USER_FAIL","LOGIN_USER","INITIAL_STATE","email","password","user","error","loading","reduxPage","state","action","console","log","type","payload"],"mappings":";;;;;;AAAA,SACEA,aADF,EAEEC,gBAFF,EAGEC,kBAHF,EAIEC,eAJF,EAKEC,UALF;AAQA,IAAMC,aAAa,GAAG;AACpBC,EAAAA,KAAK,EAAE,EADa;AAEpBC,EAAAA,QAAQ,EAAE,EAFU;AAGpBC,EAAAA,IAAI,EAAE,IAHc;AAIpBC,EAAAA,KAAK,EAAE,EAJa;AAKpBC,EAAAA,OAAO,EAAE,KALW;AAMpBC,EAAAA,SAAS,EAAE;AANS,CAAtB;AASA,gBAAe,YAAmC;AAAA,MAAlCC,KAAkC,uEAA1BP,aAA0B;AAAA,MAAXQ,MAAW;AAChDC,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,MAAtB;;AAEA,UAAQA,MAAM,CAACG,IAAf;AACE,SAAKhB,aAAL;AACE,6CAAYY,KAAZ;AAAmBN,QAAAA,KAAK,EAAEO,MAAM,CAACI;AAAjC;;AACF,SAAKhB,gBAAL;AACE,6CAAYW,KAAZ;AAAmBL,QAAAA,QAAQ,EAAEM,MAAM,CAACI;AAApC;;AACF,SAAKb,UAAL;AACE,6CAAYQ,KAAZ;AAAmBF,QAAAA,OAAO,EAAE,IAA5B;AAAkCD,QAAAA,KAAK,EAAE;AAAzC;;AACF,SAAKP,kBAAL;AACE,2DAAYU,KAAZ,GAAsBP,aAAtB;AAAqCG,QAAAA,IAAI,EAAEK,MAAM,CAACI,OAAlD;AAA2DN,QAAAA,SAAS,EAAE;AAAtE;;AACF,SAAKR,eAAL;AACE,6CAAYS,KAAZ;AAAmBH,QAAAA,KAAK,EAAE,wBAA1B;AAAoDF,QAAAA,QAAQ,EAAE,EAA9D;AAAkEG,QAAAA,OAAO,EAAE,KAA3E;AAAkFC,QAAAA,SAAS,EAAE;AAA7F;;AACF;AACE,aAAOC,KAAP;AAZJ;AAcD,CAjBD","sourcesContent":["import {\n  EMAIL_CHANGED,\n  PASSWORD_CHANGED,\n  LOGIN_USER_SUCCESS,\n  LOGIN_USER_FAIL,\n  LOGIN_USER\n} from '../actions/types';\n\nconst INITIAL_STATE = {\n  email: '',\n  password: '',\n  user: null,\n  error: '',\n  loading: false,\n  reduxPage: ''\n};\n\nexport default (state = INITIAL_STATE, action) => {\n  console.log('action', action);\n\n  switch (action.type) {\n    case EMAIL_CHANGED:\n      return { ...state, email: action.payload };\n    case PASSWORD_CHANGED:\n      return { ...state, password: action.payload };\n    case LOGIN_USER:\n      return { ...state, loading: true, error: '' };\n    case LOGIN_USER_SUCCESS:\n      return { ...state, ...INITIAL_STATE, user: action.payload, reduxPage: 'employee list' };\n    case LOGIN_USER_FAIL:\n      return { ...state, error: 'Authentication Failed.', password: '', loading: false,Â reduxPage: '' };\n    default:\n      return state;\n  }\n};"]},"metadata":{},"sourceType":"module"}