{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/tanjiro255/Desktop/React/manager/src/components/LoginForm.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { connect } from 'react-redux';\nimport { emailChanged, passwordChanged, loginUser } from \"../actions\";\nimport { Card, Input, Button, CardSection, Spinner } from \"./common\";\n\nvar LoginForm = function (_React$Component) {\n  _inherits(LoginForm, _React$Component);\n\n  var _super = _createSuper(LoginForm);\n\n  function LoginForm() {\n    var _this;\n\n    _classCallCheck(this, LoginForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.onEmailChange = function (text) {\n      _this.props.emailChanged(text);\n    };\n\n    _this.onPasswordChange = function (text) {\n      _this.props.passwordChanged(text);\n    };\n\n    _this.onButtonPress = function () {\n      var _this$props = _this.props,\n          email = _this$props.email,\n          password = _this$props.password;\n\n      _this.props.loginUser({\n        email: email,\n        password: password\n      });\n    };\n\n    _this.renderError = function () {\n      if (_this.props.error) {\n        return React.createElement(View, {\n          style: {\n            backgroundColor: 'white'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 9\n          }\n        }, React.createElement(Text, {\n          style: styles.errorStyle,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 11\n          }\n        }, _this.props.error));\n      }\n    };\n\n    _this.renderButton = function () {\n      if (_this.props.loading) {\n        return React.createElement(Spinner, {\n          size: \"large\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 14\n          }\n        });\n      }\n\n      return React.createElement(Button, {\n        onPress: _this.onButtonPress,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 12\n        }\n      }, \"Login\");\n    };\n\n    return _this;\n  }\n\n  _createClass(LoginForm, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 7\n        }\n      }, React.createElement(CardSection, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 9\n        }\n      }, React.createElement(Input, {\n        label: \"Email\",\n        placeholder: \"email@gmail.com\",\n        onChangeText: this.onEmailChange,\n        value: this.props.email,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }\n      })), React.createElement(CardSection, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 9\n        }\n      }, React.createElement(Input, {\n        onChangeText: this.onPasswordChange,\n        label: \"Password\",\n        placeholder: \"Password\",\n        secureTextEntry: true,\n        value: this.props.password,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }\n      })), this.renderError(), React.createElement(CardSection, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 9\n        }\n      }, this.renderButton()));\n    }\n  }]);\n\n  return LoginForm;\n}(React.Component);\n\nvar styles = {\n  errorStyle: {\n    fontSize: 20,\n    alignSelf: 'center',\n    color: 'red'\n  }\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  var _state$auth = state.auth,\n      email = _state$auth.email,\n      password = _state$auth.password,\n      error = _state$auth.error,\n      loading = _state$auth.loading;\n  return {\n    email: email,\n    password: password,\n    error: error,\n    loading: loading\n  };\n};\n\nexport default connect(mapStateToProps, {\n  emailChanged: emailChanged,\n  passwordChanged: passwordChanged,\n  loginUser: loginUser\n})(LoginForm);","map":{"version":3,"sources":["/home/tanjiro255/Desktop/React/manager/src/components/LoginForm.js"],"names":["React","connect","emailChanged","passwordChanged","loginUser","Card","Input","Button","CardSection","Spinner","LoginForm","onEmailChange","text","props","onPasswordChange","onButtonPress","email","password","renderError","error","backgroundColor","styles","errorStyle","renderButton","loading","Component","fontSize","alignSelf","color","mapStateToProps","state","auth"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { View, Text } from 'react-native';\nimport { connect } from 'react-redux';\nimport { emailChanged, passwordChanged, loginUser } from '../actions';\n\nimport { Card, Input, Button, CardSection, Spinner } from './common';\n\nclass LoginForm extends React.Component {\n  onEmailChange = text => {\n    this.props.emailChanged(text);\n  };\n\n  onPasswordChange = text => {\n    this.props.passwordChanged(text);\n  };\n\n  onButtonPress = () => {\n    const { email, password } = this.props;\n    this.props.loginUser({ email, password });\n  };\n\n  renderError = () => {\n    if (this.props.error) {\n      return (\n        <View style={{ backgroundColor: 'white' }}>\n          <Text style={styles.errorStyle}>{this.props.error}</Text>\n        </View>\n      );\n    }\n  };\n\n  renderButton = () => {\n    if (this.props.loading) {\n      return <Spinner size=\"large\" />;\n    }\n\n    return <Button onPress={this.onButtonPress}>Login</Button>;\n  };\n\n  render() {\n    return (\n      <Card>\n        <CardSection>\n          <Input\n            label=\"Email\"\n            placeholder=\"email@gmail.com\"\n            onChangeText={this.onEmailChange}\n            value={this.props.email}\n          />\n        </CardSection>\n\n        <CardSection>\n          <Input\n            onChangeText={this.onPasswordChange}\n            label=\"Password\"\n            placeholder=\"Password\"\n            secureTextEntry\n            value={this.props.password}\n          />\n        </CardSection>\n\n        {this.renderError()}\n\n        <CardSection>{this.renderButton()}</CardSection>\n      </Card>\n    );\n  }\n}\n\nconst styles = {\n  errorStyle: {\n    fontSize: 20,\n    alignSelf: 'center',\n    color: 'red'\n  }\n};\n\nconst mapStateToProps = (state) => {\n  const { email, password, error, loading } = state.auth;\n\n  return {\n    email,\n    password,\n    error,\n    loading\n  };\n};\n\nexport default connect(mapStateToProps, {\n  emailChanged,\n  passwordChanged,\n  loginUser\n})(LoginForm);\n"]},"metadata":{},"sourceType":"module"}